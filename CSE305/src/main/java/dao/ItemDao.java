package dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.tomcat.jni.Local;

import model.Auction;
import model.Bid;
import model.Employee;
import model.Item;
import model.Login;

public class ItemDao {

	
	public List<Item> getItems() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of all the items has to be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
		 */

		List<Item> items = new ArrayList<Item>();

		
		Connection conn = null;
		try {
			String sqlGetAllItems = "SELECT * FROM Item";
			ResultSet rs = null;
			//Connect to data base
			conn = DBAccessHelper.getDAO().getConnection();
			//executeQuery string 
			rs = DBAccessHelper.getDAO().executeQuery(sqlGetAllItems, conn);
			while(rs.next()){	
				Item item = new Item();
				item.setItemID(Integer.parseInt(rs.getString("ItemID")));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("ItemType"));
				item.setName(rs.getString("ItemName"));
				item.setNumCopies(Integer.parseInt(rs.getString("NumCopies")));
				
				items.add(item);
			}

	} catch (SQLException e) {
		//close connection
		try {
			if (conn != null)
				conn.close();
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		e.printStackTrace();
	}
		
		
		

		
		return items;
		
		
	}
	
	public List<Item> getBestsellerItems() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of the bestseller items has to be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
		 */

		List<Item> items = new ArrayList<Item>();
		

		//System.out.println(formattedDate);
		
		Date d1 = new Date();
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String formattedDate = df.format(d1);
		
		
//		"WHERE B1.BidTime > \"" + formattedDate + "\" AND B1.BidPrice >=\n" + 
		
		
		Connection conn = null;
		try {
			
			String sqlGetBestSellerItems = 
					"SELECT * FROM (\n" + 
					"SELECT B1.CustomerID, B1.AuctionID, B1.BidPrice AS SoldPrice\n" + 
					"FROM Bid B1\n" + 
					"WHERE  B1.BidPrice >=\n" + 
					" ALL (SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID =B2.AuctionID)\n" + 
					" ) S, Auction A, Item I\n" + 
					"WHERE S.AuctionID = A.AuctionID AND A.ItemID = I.ItemID\n" + 
					"GROUP BY I.ItemID";
			
			ResultSet rs = null;
			//Connect to data base
			conn = DBAccessHelper.getDAO().getConnection();
			//executeQuery string 
			rs = DBAccessHelper.getDAO().executeQuery(sqlGetBestSellerItems, conn);
			while(rs.next()){	
				Item item = new Item();
				item.setItemID(Integer.parseInt(rs.getString("ItemID")));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("ItemType"));
				item.setName(rs.getString("ItemName"));
				item.setNumCopies(Integer.parseInt(rs.getString("NumCopies")));
				
				items.add(item);
			}
			
//			String sqlGetAllItems = "SELECT * FROM Item";
//			ResultSet rs = null;
//			//Connect to data base
//			conn = DBAccessHelper.getDAO().getConnection();
//			//executeQuery string 
//			rs = DBAccessHelper.getDAO().executeQuery(sqlGetAllItems, conn);
//			ResultSetMetaData rsmd = rs.getMetaData();
//			 int columnsNumber = rsmd.getColumnCount();
//			   while (rs.next()) {
//			       for (int i = 1; i <= columnsNumber; i++) {
//			           if (i > 1) System.out.print(",  ");
//			           String columnValue = rs.getString(i);
//			           System.out.print(columnValue + " " + rsmd.getColumnName(i));
//			       }
//			       System.out.println("");
//			   }

	} catch (SQLException e) {
		//close connection
		try {
			if (conn != null)
				conn.close();
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		e.printStackTrace();
	}

		return items;
	}

	public List<Item> getSummaryListing(String searchKeyword) {
		
		Date d1 = new Date();
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String formattedDate = df.format(d1);
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of summary listing of revenue generated by a particular item or item type must be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 * Store the revenue generated by an item in the soldPrice attribute, using setSoldPrice method of each "item" object
		 */
		
		List<Item> items = new ArrayList<Item>();
		

		//System.out.println(formattedDate);
		
		Connection conn = null;
		try {
			
			String sqlGetRevenueByItemName = 
					"SELECT I.ItemID,I.ItemName,I.ItemType,I.Description,SUM(S.SoldPrice)\n" + 
					"FROM (\n" + 
					"SELECT B1.CustomerID, B1.AuctionID, B1.BidPrice AS SoldPrice\n" + 
					"FROM Bid B1\n" + 
					"WHERE B1.BidPrice >= ALL (SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID\n" + 
					"= B2.AuctionID)\n" + 
					") S, Auction A, Item I\n" + 
					"WHERE I.ItemName = \"" + searchKeyword + "\" AND S.AuctionID = A.AuctionID AND I.ItemID = A.ItemID";
			
			String sqlGetRevenueByItemType = "SELECT I.ItemID,I.ItemName,I.ItemType,I.Description,SUM(S.SoldPrice)\n" + 
					"FROM (\n" + 
					"SELECT B1.CustomerID, B1.AuctionID, B1.BidPrice AS SoldPrice\n" + 
					"FROM Bid B1\n" + 
					"WHERE B1.BidPrice >= ALL (SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID\n" + 
					"= B2.AuctionID)\n" + 
					") S, Auction A, Item I\n" + 
					"WHERE I.ItemType = \"" + searchKeyword + "\" AND S.AuctionID = A.AuctionID AND I.ItemID = A.ItemID";
			
			String sqlGetRevenueByCustomer = 
					"SELECT I.ItemID,I.ItemName,I.ItemType,I.Description,SUM(S.SoldPrice)\n" + 
					"FROM (\n" + 
					"SELECT B1.CustomerID, B1.AuctionID, B1.BidPrice AS SoldPrice\n" + 
					"FROM Bid B1\n" + 
					"WHERE B1.BidPrice >= ALL (SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID\n" + 
					"= B2.AuctionID)\n" + 
					") S, Customer C, Post P, Person P2, Item I\n" + 
					"WHERE P2.FirstName = \"" + searchKeyword + "\" AND C.CustomerID = P.CustomerID AND\n" + 
					" P.AuctionID = S.AuctionID AND P2.SSN = C.CustomerID";
			
			ResultSet rs1 = null;
			ResultSet rs2 = null;
			ResultSet rs3 = null;
			//Connect to data base
			conn = DBAccessHelper.getDAO().getConnection();
			//executeQuery string 
			rs1 = DBAccessHelper.getDAO().executeQuery(sqlGetRevenueByItemName, conn);
			rs2 = DBAccessHelper.getDAO().executeQuery(sqlGetRevenueByItemType, conn);
			rs3 = DBAccessHelper.getDAO().executeQuery(sqlGetRevenueByCustomer, conn);
//			DBAccessHelper.printData(DBAccessHelper.getDAO().executeQuery(sqlGetRevenueByItemName, conn));
//			DBAccessHelper.printData(DBAccessHelper.getDAO().executeQuery(sqlGetRevenueByItemType, conn));
//			DBAccessHelper.printData(DBAccessHelper.getDAO().executeQuery(sqlGetRevenueByCustomer, conn));
			
				while(rs1.next() && (rs1.getString("ItemID")!=null)){	
					rs1.getString(1);
//					rs1.wasNull();
					Item item = new Item();
					 
					System.out.println(rs1.getString("ItemID"));
					
					item.setItemID(Integer.parseInt(rs1.getString("ItemID")));
					item.setDescription(rs1.getString("Description"));
					item.setType(rs1.getString("ItemType"));
					item.setName(rs1.getString("ItemName"));
					item.setSoldPrice((int)Double.parseDouble(rs1.getString("SUM(S.SoldPrice)")));
					
					items.add(item);
					
				}
			
			


			

				while(rs2.next()&& (rs2.getString("ItemID")!=null)){	
					Item item = new Item();
					item.setItemID(Integer.parseInt(rs2.getString("ItemID")));
					item.setDescription(rs2.getString("Description"));
					item.setType(rs2.getString("ItemType"));
					item.setName(rs2.getString("ItemName"));
					item.setSoldPrice((int)Double.parseDouble(rs2.getString("SUM(S.SoldPrice)")));
					
					items.add(item);
				}
			
			
			

				while(rs3.next()&& (rs3.getString("ItemID")!=null)){	

					Item item = new Item();
					item.setItemID(Integer.parseInt(rs3.getString("ItemID")));
					item.setDescription(rs2.getString("Description"));
					item.setType(rs3.getString("ItemType"));
					item.setName(rs3.getString("ItemName"));
					item.setSoldPrice((int)Double.parseDouble(rs3.getString("SUM(S.SoldPrice)")));
					
					items.add(item);
				}
			
			
		
			

			
//			String sqlGetAllItems = "SELECT * FROM Item";
//			ResultSet rs = null;
//			//Connect to data base
//			conn = DBAccessHelper.getDAO().getConnection();
//			//executeQuery string 
//			rs = DBAccessHelper.getDAO().executeQuery(sqlGetAllItems, conn);
//			ResultSetMetaData rsmd = rs.getMetaData();
//			 int columnsNumber = rsmd.getColumnCount();
//			   while (rs.next()) {
//			       for (int i = 1; i <= columnsNumber; i++) {
//			           if (i > 1) System.out.print(",  ");
//			           String columnValue = rs.getString(i);
//			           System.out.print(columnValue + " " + rsmd.getColumnName(i));
//			       }
//			       System.out.println("");
//			   }

	} catch (SQLException e) {
		//close connection
		try {
			if (conn != null)
				conn.close();
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		e.printStackTrace();
	}

		return items;

	}

	public List<Item> getItemSuggestions(String customerID) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch item suggestions for a customer, indicated by customerID, must be implemented
		 * customerID, which is the Customer's ID for whom the item suggestions are fetched, is given as method parameter
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 */

		List<Item> items = new ArrayList<Item>();

		
		Connection conn = null;
		try {
			String sqlGetAllItems = "SELECT I.ItemID, I.ItemName, I.Description\n" + 
					"FROM Item I\n" + 
					"WHERE I.ItemType IN (SELECT B.ItemType FROM (SELECT B1.CustomerID, I.ItemID, I.ItemType AS ItemType\n" + 
					"FROM Bid B1, Item I, Auction A\n" + 
					"WHERE B1.AuctionID = A.AuctionID AND A.ItemID = I.ItemID \n" + 
					"AND\n" + 
					" B1.BidPrice >= ALL (SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID\n" + 
					"= B2.AuctionID) ) B WHERE B.CustomerID =\"" + customerID + "\") AND\n" + 
					" I.ItemID NOT IN (Select B.ItemID FROM (SELECT B1.CustomerID, I.ItemID, I.ItemType AS ItemType\n" + 
					"FROM Bid B1, Item I, Auction A\n" + 
					"WHERE B1.AuctionID = A.AuctionID AND A.ItemID = I.ItemID \n" + 
					"AND\n" + 
					" B1.BidPrice >= ALL (SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID\n" + 
					"= B2.AuctionID) ) B WHERE B.CustomerID =\"" + customerID + "\")\n" + 
					"";
//			String sqlGetAllItems = "SELECT I.ItemID, I.ItemName, I.Description\n" + 
//					"FROM Item I\n" + 
//					"WHERE I.ItemType IN (SELECT B.ItemType FROM (SELECT B1.CustomerID, I.ItemID, I.ItemType AS ItemType\n" + 
//					"FROM Bid B1, Item I, Auction A\n" + 
//					"WHERE B1.AuctionID = A.AuctionID AND A.ItemID = I.ItemID AND B1.BidTime > 'Today'\n" + 
//					"AND\n" + 
//					" B1.BidPrice >= ALL (SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID\n" + 
//					"= B2.AuctionID) ) B WHERE B.CustomerID = '5') AND\n" + 
//					" I.ItemID NOT IN (Select B.ItemID FROM (SELECT B1.CustomerID, I.ItemID, I.ItemType AS ItemType\n" + 
//					"FROM Bid B1, Item I, Auction A\n" + 
//					"WHERE B1.AuctionID = A.AuctionID AND A.ItemID = I.ItemID AND B1.BidTime > 'Today'\n" + 
//					"AND\n" + 
//					" B1.BidPrice >= ALL (SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID\n" + 
//					"= B2.AuctionID) ) B WHERE B.CustomerID ='5')\n" + 
//					"";
			ResultSet rs = null;
			//Connect to data base
			conn = DBAccessHelper.getDAO().getConnection();
			//executeQuery string 
			rs = DBAccessHelper.getDAO().executeQuery(sqlGetAllItems, conn);
			while(rs.next()){	
				Item item = new Item();
				item.setItemID(Integer.parseInt(rs.getString("ItemID")));
				item.setDescription(rs.getString("Description"));
				item.setName(rs.getString("ItemName"));
				
				items.add(item);
			}

	} catch (SQLException e) {
		//close connection
		try {
			if (conn != null)
				conn.close();
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		e.printStackTrace();
	}
		
		
		

		
		return items;

	}

	public List getItemsBySeller(String sellerID) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch items sold by a given seller, indicated by sellerID, must be implemented
		 * sellerID, which is the Sellers's ID who's items are fetched, is given as method parameter
		 * The bid and auction details of each of the items should also be fetched
		 * The bid details must have the highest current bid for the item
		 * The auction details must have the details about the auction in which the item is sold
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each bid record is required to be encapsulated as a "Bid" class object and added to the "bids" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items, bids and auctions Lists have to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Bid> bids = new ArrayList<Bid>();
		List<Auction> auctions = new ArrayList<Auction>();
		
		Connection conn = null;
		try {
			String sqlGetAllItems = "SELECT I.ItemID,I.ItemName, I.Description, I.ItemType, S.SoldPrice, S.CustomerID, A.MinimumBid,\n" + 
					"A.BidIncrement, A.AuctionID\n" + 
					"FROM (SELECT B1.CustomerID, B1.AuctionID, B1.BidPrice AS SoldPrice\n" + 
					"FROM Bid B1\n" + 
					"WHERE B1.BidPrice >= ALL (SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID= B2.AuctionID)) S, Item I, Post P, Auction A\n" + 
					"WHERE P.CustomerID = \"" + sellerID + "\" AND P.AuctionID = A.AuctionID AND\n" + 
					" A.ItemID = I.ItemID AND A.AuctionID = S.AuctionID";
			ResultSet rs = null;
			//Connect to data base
			conn = DBAccessHelper.getDAO().getConnection();
			//executeQuery string 
			rs = DBAccessHelper.getDAO().executeQuery(sqlGetAllItems, conn);
			while(rs.next()){	
				
				
				Item item = new Item();
				item.setItemID(Integer.parseInt(rs.getString("ItemID")));
				item.setName(rs.getString("ItemName"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("ItemType"));
				//item.setSoldPrice((int)Double.parseDouble(rs.getString("SoldPrice")));
				
				items.add(item);
				
				Bid bid = new Bid();
				bid.setBidPrice((int)Double.parseDouble(rs.getString("SoldPrice")));
				bid.setCustomerID(rs.getString("CustomerID"));
				bids.add(bid);
				
				Auction auction = new Auction();
				auction.setMinimumBid((int)Double.parseDouble(rs.getString("MinimumBid")));
				auction.setBidIncrement((int)Double.parseDouble(rs.getString("BidIncrement")));
				auction.setAuctionID((int)Double.parseDouble(rs.getString("AuctionID")));
				auctions.add(auction);
			}
			
		/*Sample data begins*/

		/*Sample data ends*/
		
		output.add(items);
		output.add(bids);
		output.add(auctions);
		}catch (SQLException e) {
			//close connection
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		}
		return output;
	}

	public List<Item> getItemTypes() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 * A query to fetch the unique item types has to be implemented
		 * Each item type is to be added to the "item" object using setType method
		 */

		List<Item> items = new ArrayList<Item>();
		Connection conn = null;
		try {
			String sqlGetAllItems = "SELECT DISTINCT ItemType FROM Item ";
			ResultSet rs = null;
			//Connect to data base
			conn = DBAccessHelper.getDAO().getConnection();
			//executeQuery string 
			rs = DBAccessHelper.getDAO().executeQuery(sqlGetAllItems, conn);
			while(rs.next()){	
				Item item = new Item();
				item.setType(rs.getString("ItemType"));
				items.add(item);
			}

	} catch (SQLException e) {
		//close connection
		try {
			if (conn != null)
				conn.close();
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		e.printStackTrace();
	}
		
		
		return items;
	}

	public List getItemsByName(String itemName) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * The itemName, which is the item's name on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemName in their name has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();
		
		Connection conn = null;
		try {
			String sqlGetAllItems = "SELECT * FROM Item I, Auction A\n" + 
					"WHERE I.ItemName = \"" + itemName + "\" AND I.ItemID = A.ItemID\n" + 
					"";
			ResultSet rs = null;
			//Connect to data base
			conn = DBAccessHelper.getDAO().getConnection();
			//executeQuery string 
			rs = DBAccessHelper.getDAO().executeQuery(sqlGetAllItems, conn);
			while(rs.next()){	
				
				
				Item item = new Item();
				item.setItemID(Integer.parseInt(rs.getString("ItemID")));
				item.setName(rs.getString("ItemName"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("ItemType"));
				//item.setSoldPrice((int)Double.parseDouble(rs.getString("SoldPrice")));
				
				items.add(item);
				
				
				Auction auction = new Auction();
				auction.setMinimumBid((int)Double.parseDouble(rs.getString("MinimumBid")));
				auction.setBidIncrement((int)Double.parseDouble(rs.getString("BidIncrement")));
//				auction.setAuctionID((int)Double.parseDouble(rs.getString("AuctionID")));
				auctions.add(auction);
			}
			
		/*Sample data begins*/

		/*Sample data ends*/
		
		output.add(items);
		output.add(auctions);
		}catch (SQLException e) {
			//close connection
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		}
		return output;
	}

	public List getItemsByType(String itemType) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * The itemType, which is the item's type on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemType as their type has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
		 */
		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();
		
		Connection conn = null;
		try {
			String sqlGetAllItems = "SELECT * FROM Item I, Auction A\n" + 
					"WHERE I.ItemType = \"" + itemType + "\" AND I.ItemID = A.ItemID";
			ResultSet rs = null;
			//Connect to data base
			conn = DBAccessHelper.getDAO().getConnection();
			//executeQuery string 
			rs = DBAccessHelper.getDAO().executeQuery(sqlGetAllItems, conn);
			while(rs.next()){	
				
				
				Item item = new Item();
				item.setItemID(Integer.parseInt(rs.getString("ItemID")));
				item.setName(rs.getString("ItemName"));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("ItemType"));
				//item.setSoldPrice((int)Double.parseDouble(rs.getString("SoldPrice")));
				
				items.add(item);
				
				
				Auction auction = new Auction();
				auction.setMinimumBid((int)Double.parseDouble(rs.getString("MinimumBid")));
				auction.setBidIncrement((int)Double.parseDouble(rs.getString("BidIncrement")));
//				auction.setAuctionID((int)Double.parseDouble(rs.getString("AuctionID")));
				auctions.add(auction);
			}
			
		/*Sample data begins*/

		/*Sample data ends*/
		
		output.add(items);
		output.add(auctions);
		}catch (SQLException e) {
			//close connection
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		}
		return output;
		
		


	}

	public List<Item> getBestsellersForCustomer(String customerID) {

		/*
		 * The students code to fetch data from the database will be written here.
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList.
		 * Query to get the Best-seller list of items for a particular customer, indicated by the customerID, has to be implemented
		 * The customerID, which is the customer's ID for whom the Best-seller items have to be fetched, is given as method parameter
		 */

		List<Item> items = new ArrayList<Item>();
		

		//System.out.println(formattedDate);
		
		Date d1 = new Date();
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String formattedDate = df.format(d1);
		
		
//		"WHERE B1.BidTime > \"" + formattedDate + "\" AND B1.BidPrice >=\n" + 
		
		
		Connection conn = null;
		try {
			
			String sqlGetBestSellerItems = 
					"SELECT * FROM (\n" + 
					"SELECT B1.CustomerID, B1.AuctionID, B1.BidPrice AS SoldPrice\n" + 
					"FROM Bid B1\n" + 
					"WHERE  B1.BidPrice >=\n" + 
					" ALL (SELECT B2.BidPrice FROM Bid B2 WHERE B1.AuctionID =B2.AuctionID)\n" + 
					" ) S, Auction A, Item I\n" + 
					"WHERE S.AuctionID = A.AuctionID AND A.ItemID = I.ItemID\n" + 
					"GROUP BY I.ItemID";
			
			ResultSet rs = null;
			//Connect to data base
			conn = DBAccessHelper.getDAO().getConnection();
			//executeQuery string 
			rs = DBAccessHelper.getDAO().executeQuery(sqlGetBestSellerItems, conn);
			while(rs.next()){	
				Item item = new Item();
				item.setItemID(Integer.parseInt(rs.getString("ItemID")));
				item.setDescription(rs.getString("Description"));
				item.setType(rs.getString("ItemType"));
				item.setName(rs.getString("ItemName"));
				item.setNumCopies(Integer.parseInt(rs.getString("NumCopies")));
				
				items.add(item);
			}
			
//			String sqlGetAllItems = "SELECT * FROM Item";
//			ResultSet rs = null;
//			//Connect to data base
//			conn = DBAccessHelper.getDAO().getConnection();
//			//executeQuery string 
//			rs = DBAccessHelper.getDAO().executeQuery(sqlGetAllItems, conn);
//			ResultSetMetaData rsmd = rs.getMetaData();
//			 int columnsNumber = rsmd.getColumnCount();
//			   while (rs.next()) {
//			       for (int i = 1; i <= columnsNumber; i++) {
//			           if (i > 1) System.out.print(",  ");
//			           String columnValue = rs.getString(i);
//			           System.out.print(columnValue + " " + rsmd.getColumnName(i));
//			       }
//			       System.out.println("");
//			   }

	} catch (SQLException e) {
		//close connection
		try {
			if (conn != null)
				conn.close();
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		e.printStackTrace();
	}

		return items;

	}

}
